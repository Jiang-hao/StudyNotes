方法的参数传递机制

实参：就是调用函数时，传递的真实参数
形参：就是函数方法，括号里面的参数

实参传递：
1. 基本数据类型：传递的只是数据值
2. 引用数据类型：传递的是地址
    *注意，特殊的，比如String、包装类型（Integer等）是不可变的。也就是说，虽然String传递的是地址，但是如果做更改，那么会在常量池
    中创建一个新对象，然后把方法的变量地址指向新创建的对象。而实参传递的值的地址依旧是指向的旧对象

举例
int a = 1
String b = "hello"
Integer c = 100
int[] arr = [1,2,3,4,5]
Data myData = new Data(a=1)

change(a,b,c,arr,myData)


func change (int x, String y, Integer z, int[] l, Data k) {
    x += 1
    y += "world"
    z += 1
    l[0] += 1
    k.a += 1
}

调用完之后，值分别是
a = 1 -> 基本数据类型值传递，所以不会修改
b = "hello" -> 由于对String做了修改，生成了一个新的String对象，但是旧的依旧指向最开始的string
c = 100 -> 和String同理，包装类型不变性
arr = [2,2,3,4,5] -> 传递的是地址，所以更改的是底层原数组，所以会变
myData.a = 2 -> 同理数组
