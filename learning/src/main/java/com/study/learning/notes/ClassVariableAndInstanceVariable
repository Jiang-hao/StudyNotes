成员变量和局部变量

一、成员的分类

局部变量:

    声明位置 - 方法体（{})中， 形参（方法的参数），代码块（{}）中

    存储位置 - 栈

    生命周期 - 跟随声明开始，到大括号结束终止。每一个线程，每一次调用，都是新的生命周期

成员变量：
类变量（前面加了static的，且只有一份，跟着类走），实例变量（没有加static的，可以有很多分，每次生成一个实例，就有一份）

    声明位置 - 类中方法体外

    存储位置 - 类变量 -> 方法区
              成员变量 -> 堆

    声明周期 - 实例变量 -> 随着实例创建而初始化，随着实例回收而消亡，每个实例的实例变量都是 独立 的
              类变量 -> 随着 类 创建而初始化，随着类回收而消亡，该类的所有实例对象的类变量是 共享 的

*堆，栈和方法区

堆：存放实例对象，包括实例对象里的实例变量
栈：存放局部变量表等，方法method
方法区：存放类信息，常量，静态变量等

*就近原则：如果方法里，局部变量和成员变量重名，并且没有特定指示，那么根据就近原则决定修改的是哪个的值


class Exam5{

    static int s; // 成员变量，类变量 s
    int i; // 成员变量，实例变量 i
    int j; // 成员变量，实例变量 j
    {
        int i = 1; // 【代码块】局部变量i
        i++
        j++
        s++
    }

    public void test(int j){ // 【形参】局部变量 j
        i++;
        j++
        s++
    }

    public static void main(string[] args){ // 局部变量 args
        Exam5 obj1 = new Exam5(); // 【方法体中】局部变量 ob1

        Exam5 obj2 = new Exam5(); // 【方法体中】局部变量 obj2

        ob1.test(10)
        ob2.test(20)

        system.print.out(....)
    }


}
